1.
#include <iostream>
#include <cmath>
#include <iomanip>

int main(){

	int a, b, c;
	std::cin >> a >> b >> c;
	int result = pow(a + 2*b, 11) - 5*c;
	result *= 3;
	std::cout << std::fixed << std::setprecision(0);
	
	std::cout << "Выражение = " << result;
	
}
2.
#include <iostream>
#include <vector>

void search_nontrivial_divisors(int num, std::vector<int>& dividers){
    for(int i = 2; i <= num/2; i++){
        if(num % i == 0) {
            dividers.push_back(i);
        }
    }
}

int main(){
    int num;
    std::cin >> num;
    
    std::vector<int> dividers;
    search_nontrivial_divisors(num, dividers);

    if(dividers.size() == 0){
        std::cout << "Нет делителей." << std::endl;
    }else{
        for(int divisor : dividers){
            std::cout << divisor << " ";
        }
        std::cout << std::endl;
    }

}
3.
#include <iostream>
#include <vector>

int main() {
	int n;
	std::cin >> n;
	std::vector<int> nums(n);

	for (int i = 0; i < n; i++){
		std::cin >> nums[i];
	}

	int maxElement = nums[0];
	int minElement = nums[0];

	for(int j = 0; j < n; j++){
		if(nums[j] > maxElement){
			maxElement = nums[j];
		}
		if(nums[j] < minElement){
			minElement = nums[j];
		}
	}

	for(int k = 0; k < n; k++){
		if(nums[k] != maxElement && nums[k] != minElement){
			nums[k] = 0;
		}
		std::cout << nums[k]; 
	}
	
}
4.
#include <iostream>
#include <cmath>

int maxSquare(int l, int r) {
    int max = -1;
    for (int i = r; i >= l; i--) {
        int sqrtNum = sqrt(i);
        if (sqrtNum * sqrtNum == i) {
            max = i;
            break;
        }
    }
    return max;
}

int main() {
    int l, r;

    std::cin >> l >> r;

    int result = maxSquare(l, r);

    if (result != -1) {
        std::cout << l << "  " << r << ": " << result << std::endl;
    } else {
        std::cout << "решений нет " << l << "  " << r << std::endl;
    }

    return 0;
}
5.
#include <iostream>

int fibonacciSum(int n) {
    if(n <= 0)
        return 0;
    
    int fib[n];
    
    fib[0] = 0;
    fib[1] = 1;
    
    int sum = fib[0] + fib[1];
    
    for(int i = 2; i < n; i++) {
        fib[i] = fib[i-1] + fib[i-2];
        sum += fib[i];
    }
    
    return sum;
}

int main() {
    int n;
    std::cin >> n;
    
    std::cout << fibonacciSum(n) << std::endl;
    
    return 0;
}
